package com.ruoyi.web.solidity;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class FundingUser extends Contract {
    public static final String[] BINARY_ARRAY = {"60806040523480156200001157600080fd5b506110016000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166356004b6a6040805190810160405280600b81526020017f66756e64696e67557365720000000000000000000000000000000000000000008152506040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040162000101919062000270565b602060405180830381600087803b1580156200011c57600080fd5b505af115801562000131573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525062000157919081019062000174565b506200031a565b60006200016c8251620002c9565b905092915050565b6000602082840312156200018757600080fd5b600062000197848285016200015e565b91505092915050565b6000620001ad82620002be565b808452620001c3816020860160208601620002d3565b620001ce8162000309565b602085010191505092915050565b6000603482527f616c6c46756e64696e67557365722c20616c6c46756e64696e674e756d53747260208301527f2c2066756e64696e6754696d652c2073636f72650000000000000000000000006040830152606082019050919050565b6000600682527f75736572496400000000000000000000000000000000000000000000000000006020830152604082019050919050565b600060608201905081810360008301526200028c8184620001a0565b90508181036020830152620002a18162000239565b90508181036040830152620002b681620001dc565b905092915050565b600081519050919050565b6000819050919050565b60005b83811015620002f3578082015181840152602081019050620002d6565b8381111562000303576000848401525b50505050565b6000601f19601f8301169050919050565b612456806200032a6000396000f300608060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630424c30e1461005c578063aca700c314610099578063edf84f99146100d9575b600080fd5b34801561006857600080fd5b50610083600480360361007e9190810190611c9b565b610116565b6040516100909190611f3d565b60405180910390f35b3480156100a557600080fd5b506100c060048036036100bb9190810190611c19565b610a85565b6040516100d09493929190612033565b60405180910390f35b3480156100e557600080fd5b5061010060048036036100fb9190810190611c19565b6111c5565b60405161010d9190611f3d565b60405180910390f35b60008060008060608060606000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040805190810160405280600b81526020017f66756e64696e67557365720000000000000000000000000000000000000000008152506040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016101cf9190611f73565b602060405180830381600087803b1580156101e957600080fd5b505af11580156101fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506102219190810190611bc7565b97508773ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561028757600080fd5b505af115801561029b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506102bf9190810190611b4c565b96508673ffffffffffffffffffffffffffffffffffffffff1663cd30a1d18f6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610316919061208d565b600060405180830381600087803b15801561033057600080fd5b505af1158015610344573d6000803e3d6000fd5b505050508773ffffffffffffffffffffffffffffffffffffffff1663e8434e398f896040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161039f929190611f95565b602060405180830381600087803b1580156103b957600080fd5b505af11580156103cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506103f19190810190611b75565b73ffffffffffffffffffffffffffffffffffffffff1663846719e060006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016104469190611f58565b602060405180830381600087803b15801561046057600080fd5b505af1158015610474573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506104989190810190611b9e565b95508573ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016104ed90612220565b600060405180830381600087803b15801561050757600080fd5b505af115801561051b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506105449190810190611c5a565b9450610550858d6116f3565b94508573ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016105a590612198565b600060405180830381600087803b1580156105bf57600080fd5b505af11580156105d3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506105fc9190810190611c5a565b9350610608848c6116f3565b93508573ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161065d90612110565b600060405180830381600087803b15801561067757600080fd5b505af115801561068b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506106b49190810190611c5a565b92506106c0838b6116f3565b92508573ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610715906120c2565b602060405180830381600087803b15801561072f57600080fd5b505af1158015610743573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506107679190810190611bf0565b9150600a8d02820191508573ffffffffffffffffffffffffffffffffffffffff1663e942b516866040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016107c69190612240565b600060405180830381600087803b1580156107e057600080fd5b505af11580156107f4573d6000803e3d6000fd5b505050508573ffffffffffffffffffffffffffffffffffffffff1663e942b516856040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161084d91906121b8565b600060405180830381600087803b15801561086757600080fd5b505af115801561087b573d6000803e3d6000fd5b505050508573ffffffffffffffffffffffffffffffffffffffff1663e942b516846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016108d49190612130565b600060405180830381600087803b1580156108ee57600080fd5b505af1158015610902573d6000803e3d6000fd5b505050508573ffffffffffffffffffffffffffffffffffffffff16632ef8ba74836040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161095b91906120e2565b600060405180830381600087803b15801561097557600080fd5b505af1158015610989573d6000803e3d6000fd5b505050508773ffffffffffffffffffffffffffffffffffffffff1663bf2b70a18f888a6040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016109e693929190611ff5565b602060405180830381600087803b158015610a0057600080fd5b505af1158015610a14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610a389190810190611bf0565b90507f0bdcb3b747cf033ae78b4b6e1576d2725709d03f68ad3d641b12cb72de61435481604051610a699190611f3d565b60405180910390a1809850505050505050505095945050505050565b60608060606000806000806000606080606060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040805190810160405280600b81526020017f66756e64696e67557365720000000000000000000000000000000000000000008152506040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610b449190611f73565b602060405180830381600087803b158015610b5e57600080fd5b505af1158015610b72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610b969190810190611bc7565b97508773ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610bfc57600080fd5b505af1158015610c10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610c349190810190611b4c565b96508673ffffffffffffffffffffffffffffffffffffffff1663cd30a1d18e6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610c8b919061208d565b600060405180830381600087803b158015610ca557600080fd5b505af1158015610cb9573d6000803e3d6000fd5b505050508773ffffffffffffffffffffffffffffffffffffffff1663", "e8434e398e896040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610d14929190611f95565b602060405180830381600087803b158015610d2e57600080fd5b505af1158015610d42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610d669190810190611b75565b95508573ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610dcc57600080fd5b505af1158015610de0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e049190810190611bf0565b60001415610e545760006020604051908101604052806000815250906020604051908101604052806000815250906020604051908101604052806000815250908090509b509b509b509b506111b6565b8573ffffffffffffffffffffffffffffffffffffffff1663846719e060006040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610eaa9190611f58565b602060405180830381600087803b158015610ec457600080fd5b505af1158015610ed8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610efc9190810190611b9e565b94508473ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610f5190612220565b600060405180830381600087803b158015610f6b57600080fd5b505af1158015610f7f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250610fa89190810190611c5a565b93508473ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610ffd90612198565b600060405180830381600087803b15801561101757600080fd5b505af115801561102b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506110549190810190611c5a565b92508473ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016110a990612110565b600060405180830381600087803b1580156110c357600080fd5b505af11580156110d7573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506111009190810190611c5a565b91508473ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611155906120c2565b602060405180830381600087803b15801561116f57600080fd5b505af1158015611183573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506111a79190810190611bf0565b9050838383839b509b509b509b505b50505050505050509193509193565b6000806000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040805190810160405280600b81526020017f66756e64696e67557365720000000000000000000000000000000000000000008152506040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016112769190611f73565b602060405180830381600087803b15801561129057600080fd5b505af11580156112a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506112c89190810190611bc7565b92508273ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561132e57600080fd5b505af1158015611342573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506113669190810190611b9e565b91508173ffffffffffffffffffffffffffffffffffffffff1663e942b516866040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016113bd919061208d565b600060405180830381600087803b1580156113d757600080fd5b505af11580156113eb573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663e942b5166040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161144290612275565b600060405180830381600087803b15801561145c57600080fd5b505af1158015611470573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663e942b5166040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016114c7906121ed565b600060405180830381600087803b1580156114e157600080fd5b505af11580156114f5573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663e942b5166040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161154c90612165565b600060405180830381600087803b15801561156657600080fd5b505af115801561157a573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16632ef8ba7460006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016115d491906120e2565b600060405180830381600087803b1580156115ee57600080fd5b505af1158015611602573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff166331afac3686846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161165d929190611fc5565b602060405180830381600087803b15801561167757600080fd5b505af115801561168b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506116af9190810190611bf0565b90507f66f7705280112a4d1145399e0414adc43a2d6974b487710f417edcf7d4a39d71816040516116e09190611f3d565b60405180910390a1809350505050919050565b606061170f60206040519081016040528060008152508461177a565b151560011515141561172357819250611771565b611762836040805190810160405280600181526020017f2c00000000000000000000000000000000000000000000000000000000000000815250611853565b925061176e8383611853565b92505b82905092915050565b6000816040518082805190602001908083835b6020831015156117b2578051825260208201915060208101905060208303925061178d565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916836040518082805190602001908083835b60208310151561181957805182526020820191506020810190506020830392506117f4565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191614905092915050565b606080606080606060008088955087945084518651016040519080825280601f01601f19166020018201604052801561189b5781602001602082028038833980820191505090505b5093508392506000915060009050600090505b85518110156119615785818151811015156118c557fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f010000000000000000000000000000000000000000000000000000000000000002838380600101945081518110151561192457fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080806001019150506118ae565b600090505b8451811015611a1957848181518110151561197d57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f01000000000000000000000000000000000000000000000000000000000000000283838060010194508151811015156119dc57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050611966565b82965050505050505092915050565b6000611a348251612341565b905092915050565b6000611a488251612353565b905092915050565b6000611a5c8251612365565b905092915050565b6000611a708251612377565b905092915050565b6000611a848235612389565b905092915050565b6000611a988251612389565b905092915050565b600082601f8301121515611ab357600080fd5b8135611ac6611ac1826122d5565b6122a8565b91508082526020830160208301858383011115611ae257600080fd5b611aed8382846123c9565b50505092915050565b600082601f8301121515611b0957600080fd5b8151611b1c611b17826122d5565b6122a8565b91508082526020830160208301858383011115611b3857600080fd5b611b438382846123d8565b50505092915050565b600060208284031215611b5e57600080fd5b6000611b6c84828501611a28565b91505092915050565b600060208284031215611b8757600080fd5b6000611b9584828501611a3c565b91505092915050565b600060208284031215611bb057600080fd5b6000611bbe84828501611a50565b91505092915050565b600060208284031215611bd957600080fd5b6000611be784828501611a64565b91505092915050565b600060208284031215611c0257600080fd5b6000611c1084828501611a8c565b91505092915050565b600060208284031215611c2b57600080fd5b600082013567ffffffffffffffff811115611c4557600080fd5b611c5184828501611aa0565b91505092915050565b600060208284031215611c6c57600080fd5b600082015167ffffffffffffffff811115611c8657600080fd5b611c9284828501611af6565b91505092915050565b600080600080600060a08688031215611cb357600080fd5b600086013567ffffffffffffffff811115611ccd57600080fd5b611cd98882890161", "1aa0565b9550506020611cea88828901611a78565b945050604086013567ffffffffffffffff811115611d0757600080fd5b611d1388828901611aa0565b935050606086013567ffffffffffffffff811115611d3057600080fd5b611d3c88828901611aa0565b925050608086013567ffffffffffffffff811115611d5957600080fd5b611d6588828901611aa0565b9150509295509295909350565b611d7b81612393565b82525050565b611d8a816123a5565b82525050565b611d9981612337565b82525050565b611da8816123b7565b82525050565b6000611db98261230c565b808452611dcd8160208601602086016123d8565b611dd68161240b565b602085010191505092915050565b6000611def82612301565b808452611e038160208601602086016123d8565b611e0c8161240b565b602085010191505092915050565b6000600682527f75736572496400000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600582527f73636f72650000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600b82527f66756e64696e6754696d650000000000000000000000000000000000000000006020830152604082019050919050565b6000601082527f616c6c46756e64696e674e756d537472000000000000000000000000000000006020830152604082019050919050565b6000808252602082019050919050565b6000600e82527f616c6c46756e64696e67557365720000000000000000000000000000000000006020830152604082019050919050565b6000602082019050611f526000830184611d90565b92915050565b6000602082019050611f6d6000830184611d9f565b92915050565b60006020820190508181036000830152611f8d8184611de4565b905092915050565b60006040820190508181036000830152611faf8185611dae565b9050611fbe6020830184611d72565b9392505050565b60006040820190508181036000830152611fdf8185611dae565b9050611fee6020830184611d81565b9392505050565b6000606082019050818103600083015261200f8186611dae565b905061201e6020830185611d81565b61202b6040830184611d72565b949350505050565b6000608082019050818103600083015261204d8187611dae565b905081810360208301526120618186611dae565b905081810360408301526120758185611dae565b90506120846060830184611d90565b95945050505050565b600060408201905081810360008301526120a681611e1a565b905081810360208301526120ba8184611dae565b905092915050565b600060208201905081810360008301526120db81611e51565b9050919050565b600060408201905081810360008301526120fb81611e51565b905061210a6020830184611d90565b92915050565b6000602082019050818103600083015261212981611e88565b9050919050565b6000604082019050818103600083015261214981611e88565b9050818103602083015261215d8184611dae565b905092915050565b6000604082019050818103600083015261217e81611e88565b9050818103602083015261219181611ef6565b9050919050565b600060208201905081810360008301526121b181611ebf565b9050919050565b600060408201905081810360008301526121d181611ebf565b905081810360208301526121e58184611dae565b905092915050565b6000604082019050818103600083015261220681611ebf565b9050818103602083015261221981611ef6565b9050919050565b6000602082019050818103600083015261223981611f06565b9050919050565b6000604082019050818103600083015261225981611f06565b9050818103602083015261226d8184611dae565b905092915050565b6000604082019050818103600083015261228e81611f06565b905081810360208301526122a181611ef6565b9050919050565b6000604051905081810181811067ffffffffffffffff821117156122cb57600080fd5b8060405250919050565b600067ffffffffffffffff8211156122ec57600080fd5b601f19601f8301169050602081019050919050565b600081519050919050565b600081519050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061234c82612317565b9050919050565b600061235e82612317565b9050919050565b600061237082612317565b9050919050565b600061238282612317565b9050919050565b6000819050919050565b600061239e82612317565b9050919050565b60006123b082612317565b9050919050565b60006123c282612337565b9050919050565b82818337600083830152505050565b60005b838110156123f65780820151818401526020810190506123db565b83811115612405576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a7230582015cd05153c6a6ca3750bde5538b86cfb8546973bfc7752352648bf21a4f7fc426c6578706572696d656e74616cf50037"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"", "d8ac59578e896040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610d14929190611f95565b602060405180830381600087803b158015610d2e57600080fd5b505af1158015610d42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610d669190810190611b75565b95508573ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610dcc57600080fd5b505af1158015610de0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e049190810190611bf0565b60001415610e545760006020604051908101604052806000815250906020604051908101604052806000815250906020604051908101604052806000815250908090509b509b509b509b506111b6565b8573ffffffffffffffffffffffffffffffffffffffff16633dd2b61460006040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610eaa9190611f58565b602060405180830381600087803b158015610ec457600080fd5b505af1158015610ed8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610efc9190810190611b9e565b94508473ffffffffffffffffffffffffffffffffffffffff16639bca41e86040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610f5190612220565b600060405180830381600087803b158015610f6b57600080fd5b505af1158015610f7f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250610fa89190810190611c5a565b93508473ffffffffffffffffffffffffffffffffffffffff16639bca41e86040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610ffd9061214a565b600060405180830381600087803b15801561101757600080fd5b505af115801561102b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506110549190810190611c5a565b92508473ffffffffffffffffffffffffffffffffffffffff16639bca41e86040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016110a9906120c2565b600060405180830381600087803b1580156110c357600080fd5b505af11580156110d7573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506111009190810190611c5a565b91508473ffffffffffffffffffffffffffffffffffffffff16634900862e6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611155906121d2565b602060405180830381600087803b15801561116f57600080fd5b505af1158015611183573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506111a79190810190611bf0565b9050838383839b509b509b509b505b50505050505050509193509193565b6000806000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166359a48b656040805190810160405280600b81526020017f66756e64696e67557365720000000000000000000000000000000000000000008152506040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016112769190611f73565b602060405180830381600087803b15801561129057600080fd5b505af11580156112a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506112c89190810190611bc7565b92508273ffffffffffffffffffffffffffffffffffffffff16635887ab246040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561132e57600080fd5b505af1158015611342573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506113669190810190611b9e565b91508173ffffffffffffffffffffffffffffffffffffffff16631a391cb4866040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016113bd919061208d565b600060405180830381600087803b1580156113d757600080fd5b505af11580156113eb573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16631a391cb46040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161144290612275565b600060405180830381600087803b15801561145c57600080fd5b505af1158015611470573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16631a391cb46040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016114c79061219f565b600060405180830381600087803b1580156114e157600080fd5b505af11580156114f5573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16631a391cb46040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161154c90612117565b600060405180830381600087803b15801561156657600080fd5b505af115801561157a573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663def4269860006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016115d491906121f2565b600060405180830381600087803b1580156115ee57600080fd5b505af1158015611602573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16634c6f30c086846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161165d929190611fc5565b602060405180830381600087803b15801561167757600080fd5b505af115801561168b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506116af9190810190611bf0565b90507f11edf97b45aa6c006853fb598a4a9be2e678d9498feb5e6c1f389b491e12bc4a816040516116e09190611f3d565b60405180910390a1809350505050919050565b606061170f60206040519081016040528060008152508461177a565b151560011515141561172357819250611771565b611762836040805190810160405280600181526020017f2c00000000000000000000000000000000000000000000000000000000000000815250611853565b925061176e8383611853565b92505b82905092915050565b6000816040518082805190602001908083835b6020831015156117b2578051825260208201915060208101905060208303925061178d565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916836040518082805190602001908083835b60208310151561181957805182526020820191506020810190506020830392506117f4565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191614905092915050565b606080606080606060008088955087945084518651016040519080825280601f01601f19166020018201604052801561189b5781602001602082028038833980820191505090505b5093508392506000915060009050600090505b85518110156119615785818151811015156118c557fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f010000000000000000000000000000000000000000000000000000000000000002838380600101945081518110151561192457fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080806001019150506118ae565b600090505b8451811015611a1957848181518110151561197d57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f01000000000000000000000000000000000000000000000000000000000000000283838060010194508151811015156119dc57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050611966565b82965050505050505092915050565b6000611a348251612341565b905092915050565b6000611a488251612353565b905092915050565b6000611a5c8251612365565b905092915050565b6000611a708251612377565b905092915050565b6000611a848235612389565b905092915050565b6000611a988251612389565b905092915050565b600082601f8301121515611ab357600080fd5b8135611ac6611ac1826122d5565b6122a8565b91508082526020830160208301858383011115611ae257600080fd5b611aed8382846123c9565b50505092915050565b600082601f8301121515611b0957600080fd5b8151611b1c611b17826122d5565b6122a8565b91508082526020830160208301858383011115611b3857600080fd5b611b438382846123d8565b50505092915050565b600060208284031215611b5e57600080fd5b6000611b6c84828501611a28565b91505092915050565b600060208284031215611b8757600080fd5b6000611b9584828501611a3c565b91505092915050565b600060208284031215611bb057600080fd5b6000611bbe84828501611a50565b91505092915050565b600060208284031215611bd957600080fd5b6000611be784828501611a64565b91505092915050565b600060208284031215611c0257600080fd5b6000611c1084828501611a8c565b91505092915050565b600060208284031215611c2b57600080fd5b600082013567ffffffffffffffff811115611c4557600080fd5b611c5184828501611aa0565b91505092915050565b600060208284031215611c6c57600080fd5b600082015167ffffffffffffffff811115611c8657600080fd5b611c9284828501611af6565b91505092915050565b600080600080600060a08688031215611cb357600080fd5b600086013567ffffffffffffffff811115611ccd57600080fd5b611cd98882890161", "1aa0565b9550506020611cea88828901611a78565b945050604086013567ffffffffffffffff811115611d0757600080fd5b611d1388828901611aa0565b935050606086013567ffffffffffffffff811115611d3057600080fd5b611d3c88828901611aa0565b925050608086013567ffffffffffffffff811115611d5957600080fd5b611d6588828901611aa0565b9150509295509295909350565b611d7b81612393565b82525050565b611d8a816123a5565b82525050565b611d9981612337565b82525050565b611da8816123b7565b82525050565b6000611db98261230c565b808452611dcd8160208601602086016123d8565b611dd68161240b565b602085010191505092915050565b6000611def82612301565b808452611e038160208601602086016123d8565b611e0c8161240b565b602085010191505092915050565b6000600682527f75736572496400000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000808252602082019050919050565b6000600b82527f66756e64696e6754696d650000000000000000000000000000000000000000006020830152604082019050919050565b6000601082527f616c6c46756e64696e674e756d537472000000000000000000000000000000006020830152604082019050919050565b6000600582527f73636f72650000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600e82527f616c6c46756e64696e67557365720000000000000000000000000000000000006020830152604082019050919050565b6000602082019050611f526000830184611d90565b92915050565b6000602082019050611f6d6000830184611d9f565b92915050565b60006020820190508181036000830152611f8d8184611de4565b905092915050565b60006040820190508181036000830152611faf8185611dae565b9050611fbe6020830184611d72565b9392505050565b60006040820190508181036000830152611fdf8185611dae565b9050611fee6020830184611d81565b9392505050565b6000606082019050818103600083015261200f8186611dae565b905061201e6020830185611d81565b61202b6040830184611d72565b949350505050565b6000608082019050818103600083015261204d8187611dae565b905081810360208301526120618186611dae565b905081810360408301526120758185611dae565b90506120846060830184611d90565b95945050505050565b600060408201905081810360008301526120a681611e1a565b905081810360208301526120ba8184611dae565b905092915050565b600060208201905081810360008301526120db81611e61565b9050919050565b600060408201905081810360008301526120fb81611e61565b9050818103602083015261210f8184611dae565b905092915050565b6000604082019050818103600083015261213081611e61565b9050818103602083015261214381611e51565b9050919050565b6000602082019050818103600083015261216381611e98565b9050919050565b6000604082019050818103600083015261218381611e98565b905081810360208301526121978184611dae565b905092915050565b600060408201905081810360008301526121b881611e98565b905081810360208301526121cb81611e51565b9050919050565b600060208201905081810360008301526121eb81611ecf565b9050919050565b6000604082019050818103600083015261220b81611ecf565b905061221a6020830184611d90565b92915050565b6000602082019050818103600083015261223981611f06565b9050919050565b6000604082019050818103600083015261225981611f06565b9050818103602083015261226d8184611dae565b905092915050565b6000604082019050818103600083015261228e81611f06565b905081810360208301526122a181611e51565b9050919050565b6000604051905081810181811067ffffffffffffffff821117156122cb57600080fd5b8060405250919050565b600067ffffffffffffffff8211156122ec57600080fd5b601f19601f8301169050602081019050919050565b600081519050919050565b600081519050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061234c82612317565b9050919050565b600061235e82612317565b9050919050565b600061237082612317565b9050919050565b600061238282612317565b9050919050565b6000819050919050565b600061239e82612317565b9050919050565b60006123b082612317565b9050919050565b60006123c282612337565b9050919050565b82818337600083830152505050565b60005b838110156123f65780820151818401526020810190506123db565b83811115612405576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a723058206cd5202f79bb193ecd3f5f89a2c2a2c0be831db1f89cacfa69a5fee29b14a35a6c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"userId\",\"type\":\"string\"},{\"name\":\"fundsNumInt\",\"type\":\"int256\"},{\"name\":\"fundingId\",\"type\":\"string\"},{\"name\":\"fundsNumStr\",\"type\":\"string\"},{\"name\":\"fundingTime\",\"type\":\"string\"}],\"name\":\"updateFundingInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userId\",\"type\":\"string\"}],\"name\":\"getUserFundingInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userId\",\"type\":\"string\"}],\"name\":\"initFundingInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"insertResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"updateResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"removeResult\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_UPDATEFUNDINGINFO = "updateFundingInfo";

    public static final String FUNC_GETUSERFUNDINGINFO = "getUserFundingInfo";

    public static final String FUNC_INITFUNDINGINFO = "initFundingInfo";

    public static final Event INSERTRESULT_EVENT = new Event("insertResult",
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {
            }));
    ;

    public static final Event UPDATERESULT_EVENT = new Event("updateResult",
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {
            }));
    ;

    public static final Event REMOVERESULT_EVENT = new Event("removeResult",
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {
            }));
    ;

    protected FundingUser(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt updateFundingInfo(String userId, BigInteger fundsNumInt, String fundingId, String fundsNumStr, String fundingTime) {
        final Function function = new Function(
                FUNC_UPDATEFUNDINGINFO,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(userId),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(fundsNumInt),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(fundingId),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(fundsNumStr),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(fundingTime)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] updateFundingInfo(String userId, BigInteger fundsNumInt, String fundingId, String fundsNumStr, String fundingTime, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEFUNDINGINFO,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(userId),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(fundsNumInt),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(fundingId),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(fundsNumStr),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(fundingTime)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateFundingInfo(String userId, BigInteger fundsNumInt, String fundingId, String fundsNumStr, String fundingTime) {
        final Function function = new Function(
                FUNC_UPDATEFUNDINGINFO,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(userId),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(fundsNumInt),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(fundingId),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(fundsNumStr),
                        new org.fisco.bcos.sdk.abi.datatypes.Utf8String(fundingTime)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, BigInteger, String, String, String> getUpdateFundingInfoInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEFUNDINGINFO,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
                }, new TypeReference<Int256>() {
                }, new TypeReference<Utf8String>() {
                }, new TypeReference<Utf8String>() {
                }, new TypeReference<Utf8String>() {
                }));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, BigInteger, String, String, String>(

                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (String) results.get(4).getValue()
        );
    }

    public Tuple1<BigInteger> getUpdateFundingInfoOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPDATEFUNDINGINFO,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {
                }));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
        );
    }

    public Tuple4<String, String, String, BigInteger> getUserFundingInfo(String userId) throws ContractException {
        final Function function = new Function(FUNC_GETUSERFUNDINGINFO,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(userId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
                }, new TypeReference<Utf8String>() {
                }, new TypeReference<Utf8String>() {
                }, new TypeReference<Int256>() {
                }));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple4<String, String, String, BigInteger>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (BigInteger) results.get(3).getValue());
    }

    public TransactionReceipt initFundingInfo(String userId) {
        final Function function = new Function(
                FUNC_INITFUNDINGINFO,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(userId)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] initFundingInfo(String userId, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_INITFUNDINGINFO,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(userId)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForInitFundingInfo(String userId) {
        final Function function = new Function(
                FUNC_INITFUNDINGINFO,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(userId)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getInitFundingInfoInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_INITFUNDINGINFO,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
                }));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
        );
    }

    public Tuple1<BigInteger> getInitFundingInfoOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_INITFUNDINGINFO,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {
                }));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
        );
    }

    public List<InsertResultEventResponse> getInsertResultEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(INSERTRESULT_EVENT, transactionReceipt);
        ArrayList<InsertResultEventResponse> responses = new ArrayList<InsertResultEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InsertResultEventResponse typedResponse = new InsertResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeInsertResultEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(INSERTRESULT_EVENT);
        subscribeEvent(ABI, BINARY, topic0, fromBlock, toBlock, otherTopics, callback);
    }

    public void subscribeInsertResultEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(INSERTRESULT_EVENT);
        subscribeEvent(ABI, BINARY, topic0, callback);
    }

    public List<UpdateResultEventResponse> getUpdateResultEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATERESULT_EVENT, transactionReceipt);
        ArrayList<UpdateResultEventResponse> responses = new ArrayList<UpdateResultEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UpdateResultEventResponse typedResponse = new UpdateResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeUpdateResultEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(UPDATERESULT_EVENT);
        subscribeEvent(ABI, BINARY, topic0, fromBlock, toBlock, otherTopics, callback);
    }

    public void subscribeUpdateResultEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(UPDATERESULT_EVENT);
        subscribeEvent(ABI, BINARY, topic0, callback);
    }

    public List<RemoveResultEventResponse> getRemoveResultEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REMOVERESULT_EVENT, transactionReceipt);
        ArrayList<RemoveResultEventResponse> responses = new ArrayList<RemoveResultEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RemoveResultEventResponse typedResponse = new RemoveResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeRemoveResultEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(REMOVERESULT_EVENT);
        subscribeEvent(ABI, BINARY, topic0, fromBlock, toBlock, otherTopics, callback);
    }

    public void subscribeRemoveResultEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(REMOVERESULT_EVENT);
        subscribeEvent(ABI, BINARY, topic0, callback);
    }

    public static FundingUser load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new FundingUser(contractAddress, client, credential);
    }

    public static FundingUser deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(FundingUser.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class InsertResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }

    public static class UpdateResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }

    public static class RemoveResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }
}
